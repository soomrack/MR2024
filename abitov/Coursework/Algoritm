#include <iostream>  
#include <vector>  
#include <algorithm>  
#include <stack>  
#include <chrono>  

struct Point {  
    int x, y;  

    Point(int x = 0, int y = 0) : x(x), y(y) {}  

    bool operator<(const Point& other) const {  
        return (y < other.y) || (y == other.y && x < other.x);  
    }  
};  

int crossProduct(const Point& O, const Point& A, const Point& B) {  
    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);  
}  

std::vector<Point> grahamScan(std::vector<Point> points) {  
    if (points.size() <= 3) return points;  

    std::sort(points.begin(), points.end());  
    Point start = points[0];  

    std::sort(points.begin() + 1, points.end(),  
        [&start](const Point& a, const Point& b) {  
            int cp = crossProduct(start, a, b);  
            return cp > 0 || (cp == 0 && ((a.x - start.x) * (a.x - start.x) + (a.y - start.y) * (a.y - start.y) <  
                ((b.x - start.x) * (b.x - start.x) + (b.y - start.y) * (b.y - start.y))));  
        });  

    std::vector<Point> hull;  
    hull.push_back(points[0]);  
    hull.push_back(points[1]);  

    for (size_t i = 2; i < points.size(); ++i) {  
        while (hull.size() >= 2 &&  
               crossProduct(hull[hull.size() - 2], hull.back(), points[i]) <= 0) {  
            hull.pop_back();  
        }  
        hull.push_back(points[i]);  
    }  

    return hull;  
}  

std::vector<Point> jarvisMarch(std::vector<Point> points) {  
    if (points.size() <= 3) return points;  

    size_t leftmost = 0;  
    for (size_t i = 1; i < points.size(); ++i) {  
        if (points[i].x < points[leftmost].x)  
            leftmost = i;  
    }  

    std::vector<Point> hull;  
    size_t current = leftmost;  

    do {  
        hull.push_back(points[current]);  
        size_t next = (current + 1) % points.size();  

        for (size_t i = 0; i < points.size(); ++i) {  
            if (crossProduct(points[current], points[i], points[next]) < 0)  
                next = i;  
        }  

        current = next;  
    } while (current != leftmost);  

    return hull;  
}  

int main() {  
    std::vector<Point> points = {{0, 0}, {1, 1}, {2, 2}, {0, 3}, {3, 0}};  

    auto start = std::chrono::high_resolution_clock::now();  
    auto grahamHull = grahamScan(points);  
    auto end = std::chrono::high_resolution_clock::now();  
    std::chrono::duration<double> elapsed = end - start;  
    std::cout << "Graham Scan: " << elapsed.count() << "s\n";  

    start = std::chrono::high_resolution_clock::now();  
    auto jarvisHull = jarvisMarch(points);  
    end = std::chrono::high_resolution_clock::now();  
    elapsed = end - start;  
    std::cout << "Jarvis March: " << elapsed.count() << "s\n";  

    return 0;  
}  

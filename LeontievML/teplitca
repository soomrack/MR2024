#include <DHT.h>
#define DHTTYPE DHT11

#define DHT_PIN 12        
#define LAMP_PIN 6        
#define FAN_PIN 7
#define NAGREV_PIN 4 
#define PUMP_PIN_1 5  
#define PUMP_PIN_2 8      
#define HUM_SOIL_PIN A1
#define HUM_SOIL_PIN A2   
#define HUM_SOIL_PIN A3    
#define ILLUMINATION_PIN A5       

class Lamp;
class Humidity_soil_sensor;
class Humidity_soil_sensors;
class Pump;
class Pumps;
class Thermometer;
class Humidity_sensor;
class Time;


DHT dht(DHT_PIN, DHTTYPE);


typedef struct {
  int temperature_min;
  int temperature_max;
  int humidity_soil_min;
  int humidity_soil_max;
  unsigned int watering_interval;
  int illumination_min;
}Climate;


void set_climate_tomato(Climate *climate)
{
    climate->temperature_max = 30;
    climate->temperature_min = 20;
    climate->humidity_soil_max = 10;
    climate->humidity_soil_min = 500; 
    climate->watering_interval = 5000;
    climate->illumination_min = 30;
    
}


class Thermometer {
  private:
      int pin;
  public:
      float temperature;
  public:
      Thermometer(int mypin):pin(mypin){};
  public:
      void get_temperature(){temperature = dht.readTemperature();} 
  };


 class Light_sensor{
    private:
      int pin;
    public:
       int illumination;
    public:
      Light_sensor(int mypin):pin(mypin){};
      void check_lighting(){illumination = analogRead(pin);} 
  };


class Lamp {
  private:
    int pin;
  public:
      bool on;
  public:
      Lamp(const int pin);
  public:
      void start() {digitalWrite(pin, true);}  
      void stop() { digitalWrite(pin, false);} 
};


Lamp::Lamp(const int mypin)
{
   pin = mypin;
   on = false;   
}


class Humidity_sensor {
  private:
    int pin;
  public:
    float humidity;
  public:
    Humidity_sensor(int mypin):pin(mypin){};
  public:
    void get_humidity(){humidity = dht.readHumidity();} 
};


class Humidity_soil_sensor {
      private:
        int pin;
      public:
          float humidity_soil;
      public:
        Humidity_soil_sensor()= delete;
        Humidity_soil_sensor(int mypin):pin(mypin){};
        void check_humidity_soil(){humidity_soil = analogRead(pin);}    
};


class Humidity_soil_sensors{
  public:
    int count;
    Humidity_sensor humidity_soil_sensors[];
    
    Humidity_soil_sensors(int mycount, Humidity_sensor myhumidity_soil_sensors[]): count(mycount){   
      for(int i = 0; i < mycount; i++) {
        humidity_soil_sensors[i] = myhumidity_soil_sensors[i];
      }
    }
    float Get_average_analog_value();     
};


float Humidity_soil_sensors::Get_average_analog_value()
{
  float sum = 0;
  for (int i=0; i < count;i++){
      humidity_soil_sensors[i].check_humidity_soil();
      sum += humidity_soil_sensors[i].humidity;
  }
  return (sum) / 3;
}


 class Heater {
    private:
      int pin;
    public:
        bool on;
    public:
        Heater(const int pin);
    public:
        void start(){digitalWrite(pin, true);}  
        void stop(){digitalWrite(pin, false);} 
};


 Heater::Heater( const int mypin)
  {
     pin = mypin;
     on = false;
  }

 
class Ventilator{
    private:
        int pin;
    public:
        bool on;
    public:
        Ventilator(const int pin);
    public:
        void start() {digitalWrite(pin, true);}  
        void stop() { digitalWrite(pin, false);}  
};


 Ventilator::Ventilator(const int mypin){
      pin = mypin;
      on = false;    
}


class Pump {
    private:
      int pin;
    public:
        bool on;
    public:
        Pump(const int pin);
    public:
        void start() {digitalWrite(pin, true);}  
        void stop() { digitalWrite(pin, false);} 
};


Pump::Pump(const int mypin)
 {
    pin = mypin;
    on = false;    
 }


class Pumps{
  public:
    int count;
    Pump pumps[];
    
    Heaters(int mycount, Pump mypumps[]): count(mycount){
      for(int i = 0; i < mycount; i++) {
        pumps[i] = mypumps[i];
      }
    }
    void start();
    void stop();     
}; 


void Pumps::start(){
  for(int i = 0; i < count; i++) {
        pumps[i].start();
    }
}


void Pumps::stop(){
  for(int i = 0; i < count; i++) {
        pumps[i].stop();
    }
}


class Time {
    private:
        int minutes;
        int seconds;
        unsigned long previousMillis;

    public:
        int hours;
        char time_of_day;// Время суток (0 - ночь, 1 - день)
        
    public:
        Time(int h, int m, int s);
        void update_time();
        void update_time_of_day(); 
};


void Time::update_time() {
            const unsigned long interval = 1000; // Интервал в миллисекундах (1 секунда)
            unsigned long currentMillis = millis();
            if (currentMillis - previousMillis >= interval) {
                seconds += (currentMillis - previousMillis)/interval;
                previousMillis = currentMillis;
                if (seconds >= 60) {
                    seconds = 0;
                    minutes++;
                    if (minutes >= 60) {
                        minutes = 0;
                        hours++;
                        if (hours >= 24) {
                            hours = 0;
                        }
                    }
                }
                update_time_of_day(); // Обновляем время суток после изменения времени
            }
        }

        
Time::Time(int h, int m, int s) : minutes(m),seconds(s),previousMillis(0),hours(h),
      time_of_day(0){
            if (hours < 0 || hours > 23) hours = 0;
            if (minutes < 0 || minutes > 59) minutes = 0;
            if (seconds < 0 || seconds > 59) seconds = 0;
            update_time_of_day(); 
        };

        
void Time::update_time_of_day() {
              if (hours >= 6 && hours < 18) {
                 time_of_day = 1;
              } else {
                time_of_day = 0;
            }
        }   


void Illumination_control(char time_of_day, Climate myclimate, Light_sensor mylight_sensor Lamp mylamp){
    if (time_of_day && (mylight_sensor.check_lighting()< myclimate.illumination_min)){
      mylamp.on = true;
    } else mylamp.on = false;
}


void humidity_soil_control(Humidity_soil_sensors myhumidity_soil_sensors,Climate myclimate,Pumps mypumps){
  static unsigned long int Hum_Time = 0;
  if (myhumidity_soil_sensors.Get_average_analog_value() > myclimate.humidity_soil_min && mypumps.on == false && millis() - Hum_Time > 3 * myclimate.watering_interval) 
  {
    for (int i=0; i < mypumps.count;i++){
        mypumps.pumps[i].on = true;
    }
  }
  else if (millis() - Hum_Time > myclimate.watering_interval){
    mypumps.on = false; 
  }
}


void temperature_control(Thermometer mythermometer, Climate myclimate,Pump mypump,Heater myheater,Ventilator myventilator){ 
  if ((mythermometer.temperature < myclimate.temperature_min) && (mypump.on == false)){ 
    myheater.heater.on = true;
    myventilator.ventilator.on = true;
  }
  else {
    myheater.heater.on = false;
    myventilator.ventilator.on = false;
    }
  }
}
  

void humidity_control(Humidity_sensor myhumidity_sensor,Climate myclimate,Ventilator myventilator,Heater myheater){ 
    if (myhumidity_sensor.humidity > myclimate.humidity_soil_min) {
      myventilator.ventilator.on = true;
    }
    else { 
      if(myheaters.heaters.on == false){
        myventilator.ventilator.on = false;
            }
      }
    }
}
 

void ventilation_at_time(int hours,Ventilator myventilator, Heater myheater) { 
   static int last_hour = 0;
    if (hours != last_hour) {
      myventilator.ventilator.on = true;
      }
    }
    else {
      if(myheater.heater.on == false){
        myventilator.ventilator.on = false;
        }
      }  
    }
    last_hour = hours;
}


void do_heat(Heater myheater)
{
    if(myheater.heater.on) {
      myheater.heater[i].start();
      }
    }
    else{
        myheater.heater[i].stop();
      }
    }
}


void do_ventilation(Ventilator myventilator)
{
    if( myventilator.ventilator.on) {
      myventilators.ventilator.start();
    }
    else {
      myventilator.ventilator.stop();
    }
}


void do_pump(Pumps pumps)
{
    if(pumps[0].on) {
      for (int i=0; i < mypumps.count;i++){
        pumps[i].start();
      }
    }
    else{
      for (int i=0; i < mypumps.count;i++){
        pumps[i].stop();
      }
    }
}


void do_lamp(Lamp lamp)
{
    if(lamp.on) {
      lamp.start();
    }
    else{
      lamp.stop();
    }
}


  Climate climate_tomato;
  Thermometer mythermometer(DHT_PIN);
  Humidity_sensor myhumidity_sensor(DHT_PIN);
  Humidity_soil_sensor myhumidity_soil_sensor(HUM_SOIL_PIN);
  Lamp mylamp(LAMP_PIN);
  Pump mypump(PUMP_PIN);
  Heater myheater(NAGREV_PIN);
  Ventilator myventilator(FAN_PIN);
  Light_sensor mylight_sensor(ILLUMINATION_PIN);

  Humidity_soil_sensor myhumidity_soil_sensors[]= {Humidity_soil_sensor(HUM_SOIL_PIN_1), Humidity_soil_sensor(HUM_SOIL_PIN_2), Humidity_soil_sensor(HUM_SOIL_PIN_3)};
  Pumps mypumps[]= {Pump(PUMP_PIN_1), Pump(PUMP_PIN_2)};
  
  Pumps mypumps(2, mypumps);
  Humidity_soil_sensors myhumidity_soil_sensors(3, myhumidity_soil_sensors);
  Time Mytime(14, 30, 0);

  
void setup() {
  Serial.begin(9600);  
  dht.begin();

  pinMode(LAMP_PIN, OUTPUT);
  pinMode(FAN_PIN, OUTPUT);
  pinMode(NAGREV_PIN, OUTPUT);
  pinMode(PUMP_PIN_1, OUTPUT);
  pinMode(PUMP_PIN_2, OUTPUT);
  
  set_climate_tomato(&climate_tomato);
}


void loop() {
  Mytime.update_time();

  Illumination_control(Mytime.time_of_day,climate_tomato,mylight_sensor,mylamp);
  humidity_soil_control(myhumidity_soil_sensors,climate_tomato,mypumps);
  temperature_control(mythermometer,climate_tomato,mypumps,myheater,myventilator);
  humidity_control(myhumidity_sensor,climate_tomato,myventilator,myheater);
  ventilation_at_time(Mytime.hours,myventilator,myheater); 

  do_heat(myheater);
  do_ventilation(myventilator);
  do_pump(mypumps);
  do_lamp(mylamp);
  delay(10);
  
}

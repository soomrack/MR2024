#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <stdexcept>


class Matrix
{
private:
    std::size_t rows;
    std::size_t cols;
    std::vector<double> data;

public:
    // Constructors
    Matrix() : rows(0), cols(0), data() { }
    Matrix(std::size_t rows, std::size_t cols);
    Matrix(const std::vector<double> &data, std::size_t rows, std::size_t cols);
    Matrix(const Matrix &);
    Matrix(Matrix &&other) noexcept;

    // Methods
    void print() const;  // const не изменяте исходную матрицу
    Matrix transpose() const;
    double determinant() const;
    static Matrix identity(std::size_t size);
    Matrix matrix_exponent(unsigned int terms = 10) const;
    void set_elems();

    // Operators
    Matrix &operator=(const Matrix &);
    Matrix &operator=(Matrix &&) noexcept;  // вызывает метод без выброса исключений
    Matrix operator+(const Matrix &) const;
    Matrix operator-(const Matrix &) const;
    Matrix operator*(double k) const;
    Matrix operator*(const Matrix &) const;
    Matrix operator^(unsigned int pow) const;
};


class MatrixException : public std::exception
{
private:
    std::string message;

public:
    explicit MatrixException(const std::string &msg) : message(msg) {}
    const char *what() const noexcept override
    {
        return message.c_str();
    }
};


// Matrix(std::size_t rows, std::size_t cols)
Matrix::Matrix(std::size_t rows, std::size_t cols) : rows(rows), cols(cols)  
{
    if (rows == 0 || cols == 0) {
        throw MatrixException("Matrix dimensions cannot be zero");
    }

    if (SIZE_MAX / rows / cols / sizeof(double) == 0) {
        throw MatrixException("Overflow, sizes of matrix is big");
    }

    data = std::vector<double>(rows * cols, 0);
}


// Matrix(const std::vector<double> &data, std::size_t rows, std::size_t cols)
Matrix::Matrix(const std::vector<double> &new_data, std::size_t rows, std::size_t cols)  
    : rows(rows), cols(cols), data(new_data)
{
    if (rows == 0 || cols == 0) {
        throw MatrixException("Matrix dimensions cannot be zero");
    }

    if (SIZE_MAX / rows / cols / sizeof(double) == 0) {
        throw MatrixException("Overflow, sizes of matrix is big");
    }
    if (data.size() != rows * cols) {
        throw MatrixException("Data size doesn't match matrix dimensions");
    }
}


// Matrix(const Matrix &)
Matrix::Matrix(const Matrix &other)
    : rows(other.rows), cols(other.cols), data(other.data) 
{ }


// Matrix(Matrix &&other) noexcept
Matrix::Matrix(Matrix &&other) noexcept  // без noexcept может просто скопировать
    : rows(other.rows), cols(other.cols), data(std::move(other.data))  // move перемещает, а не копирует
{
    other.rows = 0;
    other.cols = 0;
}


// Matrix(const Matrix &)
Matrix &Matrix::operator=(const Matrix &other)
{
    if (this == &other)
        return *this;

    rows = other.rows;
    cols = other.cols;
    data = other.data;

    return *this;
}


// Matrix(Matrix &&other) noexcept;
Matrix &Matrix::operator=(Matrix &&other) noexcept
{
    if (this == &other)
        return *this;

    rows = other.rows;
    cols = other.cols;
    data = move(other.data);

    other.rows = 0;
    other.cols = 0;

    return *this;
}


// Matrix(const Matrix &)
Matrix Matrix::operator+(const Matrix &B) const
{
    if (rows != B.rows || cols != B.cols) {
        throw MatrixException("Matrix must be same size");
    }
    Matrix result(rows, cols);  // Matrix(std::size_t rows, std::size_t cols)

    for (std::size_t elem = 0; elem < data.size(); elem++) {
        result.data[elem] = data[elem] + B.data[elem];
    }
    return result;
}


// Matrix(const Matrix &)
Matrix Matrix::operator-(const Matrix &B) const
{
    if (rows != B.rows || cols != B.cols) {
        throw MatrixException("Matrix must be same size");
    }
    Matrix result(rows, cols);  // Matrix(std::size_t rows, std::size_t cols)

    for (std::size_t elem = 0; elem < data.size(); elem++) {
        result.data[elem] = data[elem] - B.data[elem];
    }
    return result;
}


Matrix Matrix::operator*(double scalar) const
{
    Matrix result(rows, cols);  // Matrix(std::size_t rows, std::size_t cols)

    for (std::size_t elem = 0; elem < data.size(); elem++) {
        result.data[elem] = data[elem] * scalar;
    }
    return result;
}


// Matrix(const Matrix &)
Matrix Matrix::operator*(const Matrix &other) const
{
    if (cols != other.rows) {
        throw MatrixException("Wrong sizes of matrices");
    }
    Matrix result(rows, other.cols);  // Matrix(std::size_t rows, std::size_t cols)

    for (std::size_t row = 0; row < rows; ++row) {
        for (std::size_t col = 0; col < other.cols; ++col) {
            result.data[row * other.cols + col] = 0;
            for (std::size_t k = 0; k < cols; ++k) {
                result.data[row * other.cols + col] += data[row * cols + k] * other.data[k * other.cols + col];
            }
        }
    }
    return result;
}


Matrix Matrix::operator^(unsigned int power) const
{
    if (rows != cols) {
        throw MatrixException("Matrix must be square to be raised to a power!");
    }

    if (power == 0) {
        return Matrix::identity(rows);  // Matrix() : rows(0), cols(0), data() { }
    }

    if (power == 1) {
        return *this;
    }
    Matrix result = *this;  // Matrix() : rows(0), cols(0), data() { }

    for (std::size_t pow = 2; pow <= power; ++pow) {
        result = result * (*this);
    }
    return result;

}


void Matrix::print() const
{
    for (std::size_t row = 0; row < rows; ++row) {
        for (std::size_t col = 0; col < cols; ++col) {
            std::cout << data[row * cols + col] << " ";
        }
        std::cout << std::endl;
    }
}


void Matrix::set_elems()
{
    for (std::size_t row = 0; row < rows; ++row) {
        for (std::size_t col = 0; col < cols; ++col) {
            data[row * cols + col] = rand() % 10;
        }
    }
}


Matrix Matrix::transpose() const
{
    Matrix result(cols, rows);  // Matrix(std::size_t rows, std::size_t cols)
    for (std::size_t row = 0; row < rows; ++row) {
        for (std::size_t col = 0; col < cols; ++col) {
            result.data[col * result.cols + row] = data[row * cols + col];
        }
    }
    return result;
}

double Matrix::determinant() const
{
    if (rows != cols) {
        throw MatrixException("Matrix must be square to compute determinant");
    }

    if (rows == 0) {
        throw MatrixException("Rows must be more than 0");
    }

    if (rows == 1) {
        return data[0];
    }

    if (rows == 2) {
        return data[0] * data[3] - data[1] * data[2];
    }

    if (rows == 3) {
        return data[0] * (data[4] * data[8] - data[5] * data[7]) 
        - data[1] * (data[3] * data[8] - data[5] * data[6]) 
        + data[2] * (data[3] * data[7] - data[4] * data[6]);
    }
    {
        throw MatrixException("Determinant may be computing only for 2x2 and 3x3 matrices");
    }
}


Matrix Matrix::identity(std::size_t size)
{    
    Matrix result(size, size);  // Matrix(std::size_t rows, std::size_t cols)
    for (std::size_t elem = 0; elem < size; ++elem) {
        result.data[elem * size + elem] = 1.0;
    }
    return result;
}


Matrix Matrix::matrix_exponent(unsigned int terms) const
{
    if (rows != cols)
    {
        throw MatrixException("Matrix must be square to compute exponential");
    }
    Matrix result = identity(rows);  // Matrix() : rows(0), cols(0), data() { }
    Matrix term = identity(rows);  // Matrix() : rows(0), cols(0), data() { }

    for (unsigned int n = 1; n <= terms; ++n) {
        term = term * (*this) * (1.0 / n);
        result = result + term;
    }
    return result;
}


int main()
{
    srand(time(nullptr));

    int rows = 3;
    int cols = 3;

    Matrix arr_A(rows, cols);  // Matrix(std::size_t rows, std::size_t cols)
    Matrix arr_B(rows, cols);  // Matrix(std::size_t rows, std::size_t cols)

    arr_A.set_elems();
    arr_B.set_elems();

    std::cout << "Matrix A:" << std::endl;
    arr_A.print();
    std::cout << "Matrix B:" << std::endl;
    arr_B.print();

    std::cout << "A + B:" << std::endl;
    Matrix C = arr_A + arr_B;  // Matrix() : rows(0), cols(0), data() { }
    C.print();

    std::cout << "A * B:" << std::endl;
    Matrix D = arr_A * arr_B;  // Matrix() : rows(0), cols(0), data() { }
    D.print();

    std::cout << "Transpose of A:" << std::endl;
    Matrix E = arr_A.transpose();  // Matrix() : rows(0), cols(0), data() { }
    E.print();

    std::cout << "Determinant of A: " << arr_A.determinant() << std::endl;

    std::cout << "A^2:" << std::endl;
    Matrix F = arr_A ^ 2;  // Matrix() : rows(0), cols(0), data() { }
    F.print();

    std::cout << "exp(A):" << std::endl;
    Matrix G = arr_A.matrix_exponent(20);  // Matrix() : rows(0), cols(0), data() { }
    G.print();
}

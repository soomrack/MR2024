#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <climits>  // For SIZE_MAX

using namespace std;

class Matrix
{
private:
    size_t rows, cols;
    vector<double> data;

public:
    // Constructors
    Matrix() : rows(0), cols(0), data() { }
    Matrix(size_t rows, size_t cols);
    Matrix(const vector<double>& data, size_t rows, size_t cols);
    Matrix(const Matrix&);
    Matrix(Matrix&& other) noexcept;    

    // Methods
    void print() const;
    Matrix transpose() const;
    double determinant() const;
    static Matrix identity(size_t size);
    Matrix matrixExponent(unsigned int terms) const;
    void set_elems();

    // Operators
    Matrix& operator=(const Matrix&);
    Matrix& operator=(Matrix&&) noexcept;
    Matrix operator+(const Matrix&) const;
    Matrix operator-(const Matrix&) const;
    Matrix operator*(double k) const;
    Matrix operator*(const Matrix&) const; 
    Matrix operator^(unsigned int degree) const;
};

class MatrixException : public exception 
{ 
private:
    string message;
public:
    explicit MatrixException(const string& msg) : message(msg) {} 
    const char* what() const noexcept override {
        return message.c_str();
    }
};

Matrix::Matrix(size_t rows, size_t cols) : rows(rows), cols(cols) {
    if (rows == 0 || cols == 0) {
        throw MatrixException("Matrix dimensions cannot be zero");
    }
    
    if(SIZE_MAX / rows / cols / sizeof(double) == 0) {
        throw MatrixException("Overflow, sizes of matrix is big");
    }
    data = vector<double>(rows * cols, 0);
}

Matrix::Matrix(const vector<double>& new_data, size_t rows, size_t cols) 
    : rows(rows), cols(cols), data(new_data) {
    if (rows == 0 || cols == 0) {
        throw MatrixException("Matrix dimensions cannot be zero");
    }
    
    if(SIZE_MAX / rows / cols / sizeof(double) == 0) {
        throw MatrixException("Overflow, sizes of matrix is big");
    }
    if (data.size() != rows * cols) {
        throw MatrixException("Data size doesn't match matrix dimensions");
    }
}

Matrix::Matrix(const Matrix& other) 
    : rows(other.rows), cols(other.cols), data(other.data) {}

Matrix::Matrix(Matrix&& other) noexcept 
    : rows(other.rows), cols(other.cols), data(move(other.data)) {
    other.rows = 0;
    other.cols = 0;
}

Matrix& Matrix::operator=(const Matrix& other) {
    if (this == &other) return *this;
    
    rows = other.rows;
    cols = other.cols;
    data = other.data;
    
    return *this;
}

Matrix& Matrix::operator=(Matrix&& other) noexcept {
    if (this == &other) return *this;

    rows = other.rows;
    cols = other.cols;
    data = move(other.data);

    other.rows = 0;
    other.cols = 0;

    return *this;
}

Matrix Matrix::operator+(const Matrix& B) const {
    if (rows != B.rows || cols != B.cols) {
        throw MatrixException("Matrix must be same size");
    }
    Matrix result(rows, cols);
    for (size_t elem = 0; elem < data.size(); elem++) {
        result.data[elem] = data[elem] + B.data[elem];
    }
    return result;
}

Matrix Matrix::operator-(const Matrix& B) const {
    if (rows != B.rows || cols != B.cols) {
        throw MatrixException("Matrix must be same size");
    }
    Matrix result(rows, cols);
    for (size_t elem = 0; elem < data.size(); elem++) {
        result.data[elem] = data[elem] - B.data[elem];
    }
    return result;
}

Matrix Matrix::operator*(double scalar) const {
    Matrix result(rows, cols);
    for (size_t elem = 0; elem < data.size(); elem++) {
        result.data[elem] = data[elem] * scalar;
    }
    return result;
}

Matrix Matrix::operator*(const Matrix& other) const {
    if (cols != other.rows) {
        throw MatrixException("Wrong sizes of matrices");
    }
    Matrix result(rows, other.cols);
    for (size_t row = 0; row < rows; ++row) {
        for (size_t col = 0; col < other.cols; ++col) {
            result.data[row * other.cols + col] = 0;
            for (size_t k = 0; k < cols; ++k) {
                result.data[row * other.cols + col] += data[row * cols + k] * other.data[k * other.cols + col];
            }
        }
    }
    return result;
}

Matrix Matrix::operator^(unsigned int power) const {
    if (rows != cols) {
        throw MatrixException("Matrix must be square to be raised to a power!");
    }
    if (power == 0) {
        return identity(rows);
    }
    Matrix result = identity(rows);
    Matrix temp = *this;
    while (power > 0) {
        if (power % 2 == 1) {
            result = result * temp;
        }
        temp = temp * temp;
        power /= 2;
    }
    return result;
}

void Matrix::print() const {
    for (size_t row = 0; row < rows; ++row) {
        for (size_t col = 0; col < cols; ++col) {
            cout << data[row * cols + col] << " ";
        }
        cout << endl;
    }
}

void Matrix::set_elems() {
    for (size_t row = 0; row < rows; ++row) {
        for (size_t col = 0; col < cols; ++col) {
            data[row * cols + col] = rand() % 10;
        }
    }
}

Matrix Matrix::transpose() const {
    Matrix result(cols, rows);
    for (size_t row = 0; row < rows; ++row) {
        for (size_t col = 0; col < cols; ++col) {
            result.data[col * result.cols + row] = data[row * cols + col];
        }
    }
    return result;
}

double Matrix::determinant() const {
    if (rows != cols) {
        throw MatrixException("Matrix must be square to compute determinant");
    }
    if (rows == 2) {
        return data[0] * data[3] - data[1] * data[2];
    }
    else if (rows == 3) {
        return data[0] * (data[4] * data[8] - data[5] * data[7]) 
             - data[1] * (data[3] * data[8] - data[5] * data[6]) 
             + data[2] * (data[3] * data[7] - data[4] * data[6]);
    }
    else {
        throw MatrixException("Determinant may be computing only for 2x2 and 3x3 matrices");
    }
}

Matrix Matrix::identity(size_t size) {
    Matrix result(size, size);
    for (size_t i = 0; i < size; ++i) {
        result.data[i * size + i] = 1.0;
    }
    return result;
}

Matrix Matrix::matrixExponent(unsigned int terms) const {
    if (rows != cols) {
        throw MatrixException("Matrix must be square to compute exponential");
    }
    Matrix result = identity(rows);
    Matrix term = identity(rows);
    for (unsigned int n = 1; n <= terms; ++n) {
        term = term * (*this) * (1.0 / n);
        result = result + term;
    }
    return result;
}

int main()
{
    srand(time(nullptr));

    try {
        int rows = 3;
        int cols = 3;

        Matrix arr_A(rows, cols);
        Matrix arr_B(rows, cols);

        arr_A.set_elems();
        arr_B.set_elems();

        cout << "Matrix A:" << endl;
        arr_A.print();
        cout << "Matrix B:" << endl;
        arr_B.print();

        cout << "A + B:" << endl;
        Matrix C = arr_A + arr_B;
        C.print();

        cout << "A * B:" << endl;
        Matrix D = arr_A * arr_B;
        D.print();

        cout << "Transpose of A:" << endl;
        Matrix E = arr_A.transpose();
        E.print();

        cout << "Determinant of A: " << arr_A.determinant() << endl;

        cout << "A^2:" << endl;
        Matrix F = arr_A^2;
        F.print();

        cout << "exp(A):" << endl;
        Matrix G = arr_A.matrixExponent(20);
        G.print();
    }
    catch (const MatrixException& e) {
        cerr << "Matrix error: " << e.what() << endl;
        return 1;
    }
    catch (...) {
        cerr << "Unknown error occurred" << endl;
        return 2;
    }

    return 0;
}

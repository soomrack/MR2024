#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>

using namespace std;


class Matrix {
private:
    int rows, cols;
    vector<vector<int>> arr;

public:
    Matrix(int rows, int cols) : rows(rows), cols(cols), arr(rows, vector<int>(cols)) {}


    void set_elems_array() {
        for (int row = 0; row < rows; ++row) {
            for (int col = 0; col < cols; ++col) {
                arr[row][col] = rand() % 10;
            }
        }
    }


    void print() const {
        for (const auto& row : arr) {
            for (const auto& num : row) {
                cout << num << " ";
            }
            cout << endl;
        }
    }


    Matrix sum_matrix(const Matrix& other) const {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.arr[i][j] = arr[i][j] + other.arr[i][j];
            }
        }
        return result;
    }


    Matrix sub_matrix(const Matrix& other) const {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.arr[i][j] = arr[i][j] - other.arr[i][j];
            }
        }
        return result;
    }


    Matrix multiply_by_scalar(const Matrix& other, int scalar) {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.arr[i][j] = other.arr[i][j] * scalar;
            }
        }
        return result;
    }


    Matrix transpose() const {
        Matrix result(cols, rows);  
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.arr[j][i] = arr[i][j];
            }
        }
        return result;
    }


    int determinant() const {
        if (rows == 2 && cols == 2) {
            return arr[0][0] * arr[1][1] - arr[0][1] * arr[1][0]; // Детеhрминант для 2x2
        }
        else if (rows == 3 && cols == 3) {
            return arr[0][0] * (arr[1][1] * arr[2][2] - arr[1][2] * arr[2][1])
                 - arr[0][1] * (arr[1][0] * arr[2][2] - arr[1][2] * arr[2][0])
                 + arr[0][2] * (arr[1][0] * arr[2][1] - arr[1][1] * arr[2][0]); // Детерминант для 3x3
        } else {
            cout << "Детерминант можно вычислить только для матрицы 2x2 или 3x3." << endl;
            return 0;
        }
    }


    void identity() {
        for (int i = 0; i < rows; ++i) {
            arr[i][i] = 1;
        }
    }


    void fill_with_zeros() {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                arr[i][j] = 0;
            }
        }
    }


    unsigned long long factorial(unsigned int n) {
        unsigned long long fact = 1;
        for (unsigned int i = 1; i <= n; ++i) {
            fact *= i;
        }
        return fact;
    }


    Matrix matrixPower(const Matrix& A, unsigned int power) {
        Matrix result(cols, rows);
        Matrix temp = A;

        result.identity();
        
        for (unsigned int p = 0; p < power; ++p) {
            Matrix newResult(cols, rows);
            for (int i = 0; i < rows; ++i) {
                for (int j = 0; j < rows; ++j) {
                    for (int k = 0; k < rows; ++k) {
                        newResult.arr[i][j] += result.arr[i][k] * A.arr[k][j];
                    }
                }
            }
            result = newResult;
        }

        return result;
    }


    Matrix matrixExponent(const Matrix& A, int terms) {
        //int size = A.size();
        Matrix result(cols, rows);
        
        result.identity();
        
        for (int n = 1; n < terms; ++n) {
            Matrix term = matrixPower(A, n);
            double fact = 1.0 / factorial(n);

            for (int i = 0; i < rows; ++i) {
                for (int j = 0; j < cols; ++j) {
                    result.arr[i][j] += term.arr[i][j] * fact;
                }
            }
        }
        return result;
    }

};


int main() {
    srand(time(nullptr)); 

    Matrix arr_A(3, 3);
    Matrix arr_B(3, 3);

    arr_A.set_elems_array(); 
    cout << "Matrix A:" << endl;
    arr_A.print(); 
    cout << endl;

    arr_B.set_elems_array();
    cout << "Matrix B:" << endl;
    arr_B.print(); 
    cout << endl;

    Matrix sum_AnB = arr_A.sum_matrix(arr_B);
    cout << "Sum of matrices A and B:" << endl;
    sum_AnB.print();
    cout << endl;

    Matrix sub_AnB = arr_A.sub_matrix(arr_B);
    cout << "Subtraction of matrices A and B:" << endl;
    sub_AnB.print();
    cout << endl;

    Matrix multiply_by_scalar_A = arr_A.multiply_by_scalar(arr_A, 2);
    cout << "Matrix A multiplied by scalar 2:" << endl;
    multiply_by_scalar_A.print();
    cout << endl;

    Matrix transposed_A = arr_A.transpose();
    cout << "Transposed matrix A:" << endl;
    transposed_A.print();
    cout << endl;

    cout << "Determinant of matrix A: " << arr_A.determinant() << endl;
    cout << endl;

    int terms = 12;
    Matrix exponent_A = arr_A.matrixExponent(arr_A, terms);
    cout << "Exponent of matrix A:" << endl;
    exponent_A.print();
    cout << endl;

    return 0;
}
